/* This file takes in as input the files generated by DBPediaBase.java, tokenizes them.
 * Then generates SPARQL queries for retrieval of movies names of combinations generated by DBPediaBase
 * Retrieves data from DBPedia.org
 * This is a compilable and executable code, but you would need Jena API for that which is too large to upload
 * In order to run the code, you would have to download and extract jena to a folder and add the jar files in the lib folder of jena into the build path of the code  
 */
import java.io.*;
import java.util.StringTokenizer;
import com.hp.hpl.jena.query.*; 

public class DBPedia extends DBPediaBase{
	public static void DB(String path, String move, String RelDate) throws Exception
	{
		String ActorPermute[]=new String[10000];
		String ActorPermute1[] = new String[20000];
		int i=0;
		BufferedReader in = new BufferedReader(new FileReader(path+"/ActorPermute.txt"));		//Same path to which BoxOfficePrediction.java stored the Actors.txt file
		String line;
		while((line=in.readLine())!= null)
		{
			ActorPermute[i]=line;
			i++;
		}
		in.close();
		int k=0;
		File file = new File(path+"/ActorPermuteMovies.txt");
		BufferedWriter output = new BufferedWriter(new FileWriter(file));
		output.write(RelDate);
		output.newLine();
		for(int j=0;j<10000;j++)
		{
			if(ActorPermute[j]!=null)
			{
				StringTokenizer tokens = new StringTokenizer(ActorPermute[j],"(");
				while(tokens.hasMoreTokens())
				{
					StringTokenizer tokens1 = new StringTokenizer(tokens.nextToken(),")");
					while(tokens1.hasMoreTokens())
					{
						String name = tokens1.nextToken();
						StringTokenizer tokens2=new StringTokenizer(name);
						while(tokens2.hasMoreTokens())
						{
							if(ActorPermute1[k]==null)
							{
								ActorPermute1[k]=tokens2.nextToken();
							}
							else
							{
								ActorPermute1[k]=ActorPermute1[k]+tokens2.nextToken();
							}
							if(tokens2.hasMoreTokens())
							{
								ActorPermute1[k]=ActorPermute1[k]+"_";													//Modifies the Actor Name to match query format
							}
						}
						k++;
					}
				}
			}
		}
		for(int j=0;j<20000;j++)
		{
			if(ActorPermute1[j]!=null&&ActorPermute1[j+1]!=null)
			{
				while(ActorPermute1[j].contains("'"))
				if(ActorPermute1[j].contains("'"))
				{
					ActorPermute1[j] = ActorPermute1[j].substring(0,ActorPermute1[j].indexOf("'")-1) + ActorPermute1[j].substring(ActorPermute1[j].indexOf("'")+1,ActorPermute1[j].length()); 
				}
				while(ActorPermute1[j].contains("."))
					if(ActorPermute1[j].contains("."))
					{
						ActorPermute1[j] = ActorPermute1[j].substring(0,ActorPermute1[j].indexOf(".")-1) + ActorPermute1[j].substring(ActorPermute1[j].indexOf(".")+1,ActorPermute1[j].length()); 
					}
				while(ActorPermute1[j+1].contains("'"))
					if(ActorPermute1[j+1].contains("'"))
					{
						ActorPermute1[j+1] = ActorPermute1[j+1].substring(0,ActorPermute1[j+1].indexOf("'")-1) + ActorPermute1[j+1].substring(ActorPermute1[j+1].indexOf("'")+1,ActorPermute1[j+1].length()); 
					}
					while(ActorPermute1[j+1].contains("."))
						if(ActorPermute1[j+1].contains("."))
						{
							ActorPermute1[j+1] = ActorPermute1[j+1].substring(0,ActorPermute1[j+1].indexOf(".")-1) + ActorPermute1[j+1].substring(ActorPermute1[j+1].indexOf(".")+1,ActorPermute1[j+1].length()); 
						}
				ParameterizedSparqlString qs = new ParameterizedSparqlString( "" +											//SPARQL Query to retrieve movie names
						"PREFIX dbpedia2: <http://dbpedia.org/property/>" +
						"PREFIX dbpedia: <http://dbpedia.org/resource/>" +
						"SELECT DISTINCT ?film WHERE {" +
						"?film dbpedia2:starring dbpedia:" + ActorPermute1[j] + "." +
						"?film dbpedia2:starring dbpedia:" + ActorPermute1[j+1] + "." +
						"}"); 
				QueryExecution exec = QueryExecutionFactory.sparqlService( "http://dbpedia.org/sparql", qs.asQuery() );
				ResultSet results = exec.execSelect();
				while(results.hasNext())
				{
					StringTokenizer token_name = new StringTokenizer(results.next().toString(),"/");
					while(token_name.hasMoreTokens())
					{
						String next = token_name.nextToken();
						if(!(next.equals("dbpedia.org"))&&(!(next.equals("resource")))&&(!(next.equals("( ?film = <http:"))))
						{
							StringTokenizer name = new StringTokenizer(next,"(");
							StringTokenizer name1=new StringTokenizer(name.nextToken(),">");
							StringTokenizer name2 = new StringTokenizer(name1.nextToken(),"_");
							String movie_name = null;
							String movie_namer=null;
							while(name2.hasMoreTokens())
							{
								if(movie_namer==null)
								{
									String namer = name2.nextToken();
									if(name2.hasMoreTokens())
										movie_namer= namer + " ";
									else
										movie_namer = namer;
								}
								else
								{
									String namer=name2.nextToken();
									if(name2.hasMoreTokens())
										movie_namer=movie_namer + namer + " ";
									else
										movie_namer = movie_namer + namer;
								}
							}
							if(!(movie_namer.equals(move)))
								movie_name = "(" + ActorPermute1[j] + "," + ActorPermute1[j+1] + ")" + " " + "(" + movie_namer + ")";
							if(movie_name!=null)
							{
								System.out.println(movie_name);
								output.write(movie_name);
								output.newLine();
							}
						}
					}
				}
			}
			j=j+1;
		}
		output.close();
		String DirectorPermute[]=new String[400];
		String DirectorPermute1[] = new String[800];
		i=0;
		BufferedReader in1 = new BufferedReader(new FileReader(path+"/DirectorPermute.txt"));		//Same path to which BoxOfficePrediction.java stored the Actors.txt file
		String line1;
		while((line1=in1.readLine())!= null)
		{
			DirectorPermute[i]=line1;
			i++;
		}
		in1.close();
		k=0;
		File file1 = new File(path + "/DirectorPermuteMovies.txt");
		BufferedWriter output1 = new BufferedWriter(new FileWriter(file1));
		output1.write(RelDate);
		output1.newLine();
		for(int j=0;j<400;j++)
		{
			if(DirectorPermute[j]!=null)
			{
				StringTokenizer tokens = new StringTokenizer(DirectorPermute[j],"(");
				while(tokens.hasMoreTokens())
				{
					StringTokenizer tokens1 = new StringTokenizer(tokens.nextToken(),")");
					while(tokens1.hasMoreTokens())
					{
						String name = tokens1.nextToken();
						StringTokenizer tokens2=new StringTokenizer(name);
						while(tokens2.hasMoreTokens())
						{
							if(DirectorPermute1[k]==null)
							{
								DirectorPermute1[k]=tokens2.nextToken();
							}
							else
							{
								DirectorPermute1[k]=DirectorPermute1[k]+tokens2.nextToken();
							}
							if(tokens2.hasMoreTokens())
							{
								DirectorPermute1[k]=DirectorPermute1[k]+"_";
							}
						}
						k++;
					}
				}
			}
		}
		for(int j=0;j<800;j++)
		{
			if(DirectorPermute1[j]!=null&&DirectorPermute1[j+1]!=null)
			{
				while(DirectorPermute1[j].contains("'"))
					if(DirectorPermute1[j].contains("'"))
					{
						DirectorPermute1[j] = DirectorPermute1[j].substring(0,DirectorPermute1[j].indexOf("'")-1) + DirectorPermute1[j].substring(DirectorPermute1[j].indexOf("'")+1,DirectorPermute1[j].length()); 
					}
					while(DirectorPermute1[j].contains("."))
						if(DirectorPermute1[j].contains("."))
						{
							DirectorPermute1[j] = DirectorPermute1[j].substring(0,DirectorPermute1[j].indexOf(".")-1) + DirectorPermute1[j].substring(DirectorPermute1[j].indexOf(".")+1,DirectorPermute1[j].length()); 
						}
					while(DirectorPermute1[j+1].contains("'"))
						if(DirectorPermute1[j+1].contains("'"))
						{
							DirectorPermute1[j+1] = DirectorPermute1[j+1].substring(0,DirectorPermute1[j+1].indexOf("'")-1) + DirectorPermute1[j+1].substring(DirectorPermute1[j+1].indexOf("'")+1,DirectorPermute1[j+1].length()); 
						}
						while(DirectorPermute1[j+1].contains("."))
							if(DirectorPermute1[j+1].contains("."))
							{
								DirectorPermute1[j+1] = DirectorPermute1[j+1].substring(0,DirectorPermute1[j+1].indexOf(".")-1) + DirectorPermute1[j+1].substring(DirectorPermute1[j+1].indexOf(".")+1,DirectorPermute1[j+1].length()); 
							}
				ParameterizedSparqlString qs = new ParameterizedSparqlString( "" +						//SPARQL Query to retrieve movies of Directors
						"PREFIX dbpedia2: <http://dbpedia.org/property/>" +
						"PREFIX dbpedia: <http://dbpedia.org/resource/>" +
						"SELECT DISTINCT ?film WHERE {" +
						"?film dbpedia2:director dbpedia:" + DirectorPermute1[j] + "." +
						"?film dbpedia2:director dbpedia:" + DirectorPermute1[j+1] + "." +
						"}"); 
				QueryExecution exec = QueryExecutionFactory.sparqlService( "http://dbpedia.org/sparql", qs.asQuery() );
				ResultSet results = exec.execSelect();
				while(results.hasNext())
				{
					StringTokenizer token_name = new StringTokenizer(results.next().toString(),"/");
					while(token_name.hasMoreTokens())
					{
						String next = token_name.nextToken();
						if(!(next.equals("dbpedia.org"))&&(!(next.equals("resource")))&&(!(next.equals("( ?film = <http:"))))
						{
							StringTokenizer name = new StringTokenizer(next,"(");
							StringTokenizer name1=new StringTokenizer(name.nextToken(),">");
							StringTokenizer name2 = new StringTokenizer(name1.nextToken(),"_");
							String movie_name = null;
							String movie_namer=null;
							while(name2.hasMoreTokens())
							{
								if(movie_namer==null)
								{
									String namer = name2.nextToken();
									if(name2.hasMoreTokens())
										movie_namer= namer + " ";
									else
										movie_namer = namer;
								}
								else
								{
									String namer=name2.nextToken();
									if(name2.hasMoreTokens())
										movie_namer=movie_namer + namer + " ";
									else
										movie_namer = movie_namer + namer;
								}
							}
							if(!(movie_namer.equals(move)))
								movie_name = "(" + DirectorPermute1[j] + "," + DirectorPermute1[j+1] + ")" + " " + "(" + movie_namer + ")";
							if(movie_name!=null)
							{
								System.out.println(movie_name);
								output1.write(movie_name);
								output1.newLine();
							}
						}
					}
				}
			}
			j=j+1;
		}
		output1.close();
		String ProducerPermute[]=new String[400];
		String ProducerPermute1[] = new String[800];
		i=0;
		BufferedReader in2 = new BufferedReader(new FileReader(path+"/ProducerPermute.txt"));		//Same path to which BoxOfficePrediction.java stored the Actors.txt file
		String line2;
		while((line2=in2.readLine())!= null)
		{
			ProducerPermute[i]=line2;
			i++;
		}
		in2.close();
		k=0;
		for(int j=0;j<400;j++)
		{
			if(ProducerPermute[j]!=null)
			{
				StringTokenizer tokens = new StringTokenizer(ProducerPermute[j],"(");
				while(tokens.hasMoreTokens())
				{
					StringTokenizer tokens1 = new StringTokenizer(tokens.nextToken(),")");
					while(tokens1.hasMoreTokens())
					{
						String name = tokens1.nextToken();
						StringTokenizer tokens2=new StringTokenizer(name);
						while(tokens2.hasMoreTokens())
						{
							if(ProducerPermute1[k]==null)
							{
								ProducerPermute1[k]=tokens2.nextToken();
							}
							else
							{
								ProducerPermute1[k]=ProducerPermute1[k]+tokens2.nextToken();
							}
							if(tokens2.hasMoreTokens())
							{
								ProducerPermute1[k]=ProducerPermute1[k]+"_";
							}
						}
						k++;
					}
				}
			}
		}
		File file2 = new File(path + "/ProducerPermuteMovies.txt");
		BufferedWriter output2 = new BufferedWriter(new FileWriter(file2));
		output2.write(RelDate);
		output2.newLine();
		for(int j=0;j<800;j++)
		{
			if(ProducerPermute1[j]!=null&&ProducerPermute1[j+1]!=null)
			{
				while(ProducerPermute1[j].contains("'"))
					if(ProducerPermute1[j].contains("'"))
					{
						ProducerPermute1[j] = ProducerPermute1[j].substring(0,ProducerPermute1[j].indexOf("'")-1) + ProducerPermute1[j].substring(ProducerPermute1[j].indexOf("'")+1,ProducerPermute1[j].length()); 
					}
					while(ProducerPermute1[j].contains("."))
						if(ProducerPermute1[j].contains("."))
						{
							ProducerPermute1[j] = ProducerPermute1[j].substring(0,ProducerPermute1[j].indexOf(".")-1) + ProducerPermute1[j].substring(ProducerPermute1[j].indexOf(".")+1,ProducerPermute1[j].length()); 
						}
					while(ProducerPermute1[j+1].contains("'"))
						if(ProducerPermute1[j+1].contains("'"))
						{
							ProducerPermute1[j+1] = ProducerPermute1[j+1].substring(0,ProducerPermute1[j+1].indexOf("'")-1) + ProducerPermute1[j+1].substring(ProducerPermute1[j+1].indexOf("'")+1,ProducerPermute1[j+1].length()); 
						}
						while(ProducerPermute1[j+1].contains("."))
							if(ProducerPermute1[j+1].contains("."))
							{
								ProducerPermute1[j+1] = ProducerPermute1[j+1].substring(0,ProducerPermute1[j+1].indexOf(".")-1) + ProducerPermute1[j+1].substring(ProducerPermute1[j+1].indexOf(".")+1,ProducerPermute1[j+1].length()); 
							}
				ParameterizedSparqlString qs = new ParameterizedSparqlString( "" +												//SPARQL Query to retrieve movies of producers
						"PREFIX dbpedia2: <http://dbpedia.org/property/>" +
						"PREFIX dbpedia: <http://dbpedia.org/resource/>" +
						"SELECT DISTINCT ?film WHERE {" +
						"?film dbpedia2:producer dbpedia:" + ProducerPermute1[j] + "." +
						"?film dbpedia2:producer dbpedia:" + ProducerPermute1[j+1] + "." +
						"}"); 
				QueryExecution exec = QueryExecutionFactory.sparqlService( "http://dbpedia.org/sparql", qs.asQuery() );
				ResultSet results = exec.execSelect();
				while(results.hasNext())
				{
					StringTokenizer token_name = new StringTokenizer(results.next().toString(),"/");
					while(token_name.hasMoreTokens())
					{
						String next = token_name.nextToken();
						if(!(next.equals("dbpedia.org"))&&(!(next.equals("resource")))&&(!(next.equals("( ?film = <http:"))))
						{
							StringTokenizer name = new StringTokenizer(next,"(");
							StringTokenizer name1=new StringTokenizer(name.nextToken(),">");
							StringTokenizer name2 = new StringTokenizer(name1.nextToken(),"_");
							String movie_name = null;
							String movie_namer=null;
							while(name2.hasMoreTokens())
							{
								if(movie_namer==null)
								{
									String namer = name2.nextToken();
									if(name2.hasMoreTokens())
										movie_namer= namer + " ";
									else
										movie_namer = namer;
								}
								else
								{
									String namer=name2.nextToken();
									if(name2.hasMoreTokens())
										movie_namer=movie_namer + namer + " ";
									else
										movie_namer = movie_namer + namer;
								}
							}
							if(!(movie_namer.equals(move)))
								movie_name = "(" + ProducerPermute1[j] + "," + ProducerPermute1[j+1] + ")" + " " + "(" + movie_namer + ")";
							if(movie_name!=null)
							{
								System.out.println(movie_name);
								output2.write(movie_name);
								output2.newLine();
							}
						}
					}
				}
			}
			j=j+1;
		}
		output2.close();
		String ActorDirectorPermute[]=new String[15000];
		String ActorDirectorPermute1[] = new String[30000];
		i=0;
		BufferedReader in3 = new BufferedReader(new FileReader(path+"/ActorDirectorPermute.txt"));		//Same path to which BoxOfficePrediction.java stored the Actors.txt file
		String line3;
		while((line3=in3.readLine())!= null)
		{
			ActorDirectorPermute[i]=line3;
			i++;
		}
		in3.close();
		k=0;
		for(int j=0;j<15000;j++)
		{
			if(ActorDirectorPermute[j]!=null)
			{
				StringTokenizer tokens = new StringTokenizer(ActorDirectorPermute[j],"(");
				while(tokens.hasMoreTokens())
				{
					StringTokenizer tokens1 = new StringTokenizer(tokens.nextToken(),")");
					while(tokens1.hasMoreTokens())
					{
						String name = tokens1.nextToken();
						StringTokenizer tokens2=new StringTokenizer(name);
						while(tokens2.hasMoreTokens())
						{
							if(ActorDirectorPermute1[k]==null)
							{
								ActorDirectorPermute1[k]=tokens2.nextToken();
							}
							else
							{
								ActorDirectorPermute1[k]=ActorDirectorPermute1[k]+tokens2.nextToken();
							}
							if(tokens2.hasMoreTokens())
							{
								ActorDirectorPermute1[k]=ActorDirectorPermute1[k]+"_";
							}
						}
						k++;
					}
				}
			}
		}
		File file3 = new File(path + "/ActorDirectorPermuteMovies.txt");
		BufferedWriter output3 = new BufferedWriter(new FileWriter(file3));
		output3.write(RelDate);
		output3.newLine();
		for(int j=0;j<30000;j++)
		{
			if(ActorDirectorPermute1[j]!=null&&ActorDirectorPermute1[j+1]!=null)
			{
				while(ActorDirectorPermute1[j].contains("'"))
					if(ActorDirectorPermute1[j].contains("'"))
					{
						ActorDirectorPermute1[j] = ActorDirectorPermute1[j].substring(0,ActorDirectorPermute1[j].indexOf("'")-1) + ActorDirectorPermute1[j].substring(ActorDirectorPermute1[j].indexOf("'")+1,ActorDirectorPermute1[j].length()); 
					}
					while(ActorDirectorPermute1[j].contains("."))
						if(ActorDirectorPermute1[j].contains("."))
						{
							ActorDirectorPermute1[j] = ActorDirectorPermute1[j].substring(0,ActorDirectorPermute1[j].indexOf(".")-1) + ActorDirectorPermute1[j].substring(ActorDirectorPermute1[j].indexOf(".")+1,ActorDirectorPermute1[j].length()); 
						}
					while(ActorDirectorPermute1[j+1].contains("'"))
						if(ActorDirectorPermute1[j+1].contains("'"))
						{
							ActorDirectorPermute1[j+1] = ActorDirectorPermute1[j+1].substring(0,ActorDirectorPermute1[j+1].indexOf("'")-1) + ActorDirectorPermute1[j+1].substring(ActorDirectorPermute1[j+1].indexOf("'")+1,ActorDirectorPermute1[j+1].length()); 
						}
						while(ActorDirectorPermute1[j+1].contains("."))
							if(ActorDirectorPermute1[j+1].contains("."))
							{
								ActorDirectorPermute1[j+1] = ActorDirectorPermute1[j+1].substring(0,ActorDirectorPermute1[j+1].indexOf(".")-1) + ActorDirectorPermute1[j+1].substring(ActorDirectorPermute1[j+1].indexOf(".")+1,ActorDirectorPermute1[j+1].length()); 
							}
				ParameterizedSparqlString qs = new ParameterizedSparqlString( "" +										//SPARQL Query to retrieve Actor-Director combination movies
						"PREFIX dbpedia2: <http://dbpedia.org/property/>" +
						"PREFIX dbpedia: <http://dbpedia.org/resource/>" +
						"SELECT DISTINCT ?film WHERE {" +
						"?film dbpedia2:starring dbpedia:" + ActorDirectorPermute1[j] + "." +
						"?film dbpedia2:director dbpedia:" + ActorDirectorPermute1[j+1] + "." +
						"}"); 
				QueryExecution exec = QueryExecutionFactory.sparqlService( "http://dbpedia.org/sparql", qs.asQuery() );
				ResultSet results = exec.execSelect();
				while(results.hasNext())
				{
					StringTokenizer token_name = new StringTokenizer(results.next().toString(),"/");
					while(token_name.hasMoreTokens())
					{
						String next = token_name.nextToken();
						if(!(next.equals("dbpedia.org"))&&(!(next.equals("resource")))&&(!(next.equals("( ?film = <http:"))))
						{
							StringTokenizer name = new StringTokenizer(next,"(");
							StringTokenizer name1=new StringTokenizer(name.nextToken(),">");
							StringTokenizer name2 = new StringTokenizer(name1.nextToken(),"_");
							String movie_name = null;
							String movie_namer=null;
							while(name2.hasMoreTokens())
							{
								if(movie_namer==null)
								{
									String namer = name2.nextToken();
									if(name2.hasMoreTokens())
										movie_namer= namer + " ";
									else
										movie_namer = namer;
								}
								else
								{
									String namer=name2.nextToken();
									if(name2.hasMoreTokens())
										movie_namer=movie_namer + namer + " ";
									else
										movie_namer = movie_namer + namer;
								}
							}
							if(!(movie_namer.equals(move)))
								movie_name = "(" + ActorDirectorPermute1[j] + "," + ActorDirectorPermute1[j+1] + ")" + " " + "(" + movie_namer + ")"; 
							if(movie_name!=null)
							{
								System.out.println(movie_name);
								output3.write(movie_name);
								output3.newLine();
							}
						}
					}
				}
			}
			j=j+1;
		}
		output3.close();
		String ActorProducerPermute[]=new String[15000];
		String ActorProducerPermute1[] = new String[30000];
		i=0;
		BufferedReader in4 = new BufferedReader(new FileReader(path+"/ActorProducerPermute.txt"));		//Same path to which BoxOfficePrediction.java stored the Actors.txt file
		String line4;
		while((line4=in4.readLine())!= null)
		{
			ActorProducerPermute[i]=line4;
			i++;
		}
		in4.close();
		k=0;
		for(int j=0;j<15000;j++)
		{
			if(ActorProducerPermute[j]!=null)
			{
				StringTokenizer tokens = new StringTokenizer(ActorProducerPermute[j],"(");
				while(tokens.hasMoreTokens())
				{
					StringTokenizer tokens1 = new StringTokenizer(tokens.nextToken(),")");
					while(tokens1.hasMoreTokens())
					{
						String name = tokens1.nextToken();
						StringTokenizer tokens2=new StringTokenizer(name);
						while(tokens2.hasMoreTokens())
						{
							if(ActorProducerPermute1[k]==null)
							{
								ActorProducerPermute1[k]=tokens2.nextToken();
							}
							else
							{
								ActorProducerPermute1[k]=ActorProducerPermute1[k]+tokens2.nextToken();
							}
							if(tokens2.hasMoreTokens())
							{
								ActorProducerPermute1[k]=ActorProducerPermute1[k]+"_";
							}
						}
						k++;
					}
				}
			}
		}
		File file4 = new File(path + "/ActorProducerPermuteMovies.txt");
		BufferedWriter output4 = new BufferedWriter(new FileWriter(file4));
		output4.write(RelDate);
		output4.newLine();
		for(int j=0;j<30000;j++)
		{
			if(ActorProducerPermute1[j]!=null&&ActorProducerPermute1[j+1]!=null)
			{
				while(ActorProducerPermute1[j].contains("'"))
					if(ActorProducerPermute1[j].contains("'"))
					{
						ActorProducerPermute1[j] = ActorProducerPermute1[j].substring(0,ActorProducerPermute1[j].indexOf("'")-1) + ActorProducerPermute1[j].substring(ActorProducerPermute1[j].indexOf("'")+1,ActorProducerPermute1[j].length()); 
					}
					while(ActorProducerPermute1[j].contains("."))
						if(ActorProducerPermute1[j].contains("."))
						{
							ActorProducerPermute1[j] = ActorProducerPermute1[j].substring(0,ActorProducerPermute1[j].indexOf(".")-1) + ActorProducerPermute1[j].substring(ActorProducerPermute1[j].indexOf(".")+1,ActorProducerPermute1[j].length()); 
						}
					while(ActorProducerPermute1[j+1].contains("'"))
						if(ActorProducerPermute1[j+1].contains("'"))
						{
							ActorProducerPermute1[j+1] = ActorProducerPermute1[j+1].substring(0,ActorProducerPermute1[j+1].indexOf("'")-1) + ActorProducerPermute1[j+1].substring(ActorProducerPermute1[j+1].indexOf("'")+1,ActorProducerPermute1[j+1].length()); 
						}
						while(ActorProducerPermute1[j+1].contains("."))
							if(ActorProducerPermute1[j+1].contains("."))
							{
								ActorProducerPermute1[j+1] = ActorProducerPermute1[j+1].substring(0,ActorProducerPermute1[j+1].indexOf(".")-1) + ActorProducerPermute1[j+1].substring(ActorProducerPermute1[j+1].indexOf(".")+1,ActorProducerPermute1[j+1].length()); 
							}
				ParameterizedSparqlString qs = new ParameterizedSparqlString( "" +
						"PREFIX dbpedia2: <http://dbpedia.org/property/>" +
						"PREFIX dbpedia: <http://dbpedia.org/resource/>" +														//SPARQL Query to retrieve Actor-Producer combination movies
						"SELECT DISTINCT ?film WHERE {" +
						"?film dbpedia2:starring dbpedia:" + ActorProducerPermute1[j] + "." +
						"?film dbpedia2:producer dbpedia:" + ActorProducerPermute1[j+1] + "." +
						"}"); 
				QueryExecution exec = QueryExecutionFactory.sparqlService( "http://dbpedia.org/sparql", qs.asQuery() );
				ResultSet results = exec.execSelect();
				while(results.hasNext())
				{
					StringTokenizer token_name = new StringTokenizer(results.next().toString(),"/");
					while(token_name.hasMoreTokens())
					{
						String next = token_name.nextToken();
						if(!(next.equals("dbpedia.org"))&&(!(next.equals("resource")))&&(!(next.equals("( ?film = <http:"))))
						{
							StringTokenizer name = new StringTokenizer(next,"(");
							StringTokenizer name1=new StringTokenizer(name.nextToken(),">");
							StringTokenizer name2 = new StringTokenizer(name1.nextToken(),"_");
							String movie_name = null;
							String movie_namer=null;
							while(name2.hasMoreTokens())
							{
								if(movie_namer==null)
								{
									String namer = name2.nextToken();
									if(name2.hasMoreTokens())
										movie_namer= namer + " ";
									else
										movie_namer = namer;
								}
								
								else
								{
									String namer=name2.nextToken();
									if(name2.hasMoreTokens())
										movie_namer=movie_namer + namer + " ";
									else
										movie_namer = movie_namer + namer;
								}
							}
							if(!(movie_namer.equals(move)))
								movie_name = "(" + ActorProducerPermute1[j] + "," + ActorProducerPermute1[j+1] + ")" + " " + "(" + movie_namer + ")"; 
							if(movie_name!=null)
							{
								System.out.println(movie_name);
								output4.write(movie_name);
								output4.newLine();
							}
						}
					}
				}
			}
			j=j+1;
		}
		output4.close();
		String DirectorProducerPermute[]=new String[1600];
		String DirectorProducerPermute1[] = new String[3200];
		i=0;
		BufferedReader in5 = new BufferedReader(new FileReader(path+"/DirectorProducerPermute.txt"));		//Same path to which BoxOfficePrediction.java stored the Actors.txt file
		String line5;
		while((line5=in5.readLine())!= null)
		{
			DirectorProducerPermute[i]=line5;
			i++;
		}
		in5.close();
		k=0;
		for(int j=0;j<1600;j++)
		{
			if(DirectorProducerPermute[j]!=null)
			{
				StringTokenizer tokens = new StringTokenizer(DirectorProducerPermute[j],"(");
				while(tokens.hasMoreTokens())
				{
					StringTokenizer tokens1 = new StringTokenizer(tokens.nextToken(),")");
					while(tokens1.hasMoreTokens())
					{
						String name = tokens1.nextToken();
						StringTokenizer tokens2=new StringTokenizer(name);
						while(tokens2.hasMoreTokens())
						{
							if(DirectorProducerPermute1[k]==null)
							{
								DirectorProducerPermute1[k]=tokens2.nextToken();
							}
							else
							{
								DirectorProducerPermute1[k]=DirectorProducerPermute1[k]+tokens2.nextToken();
							}
							if(tokens2.hasMoreTokens())
							{
								DirectorProducerPermute1[k]=DirectorProducerPermute1[k]+"_";
							}
						}
						k++;
					}
				}
			}
		}
		File file5 = new File(path + "/DirectorProducerPermuteMovies.txt");
		BufferedWriter output5 = new BufferedWriter(new FileWriter(file5));
		output5.write(RelDate);
		output5.newLine();
		for(int j=0;j<3200;j++)
		{
			if(DirectorProducerPermute1[j]!=null&&DirectorProducerPermute1[j+1]!=null)
			{
				while(DirectorProducerPermute1[j].contains("'"))						//Modifying input names to match format supported by JENA - SPARQL
					if(DirectorProducerPermute1[j].contains("'"))
					{
						DirectorProducerPermute1[j] = DirectorProducerPermute1[j].substring(0,DirectorProducerPermute1[j].indexOf("'")-1) + DirectorProducerPermute1[j].substring(DirectorProducerPermute1[j].indexOf("'")+1,DirectorProducerPermute1[j].length()); 
					}
					while(DirectorProducerPermute1[j].contains("."))
						if(DirectorProducerPermute1[j].contains("."))
						{
							DirectorProducerPermute1[j] = DirectorProducerPermute1[j].substring(0,DirectorProducerPermute1[j].indexOf(".")-1) + DirectorProducerPermute1[j].substring(DirectorProducerPermute1[j].indexOf(".")+1,DirectorProducerPermute1[j].length()); 
						}
					while(DirectorProducerPermute1[j+1].contains("'"))
						if(DirectorProducerPermute1[j+1].contains("'"))
						{
							DirectorProducerPermute1[j+1] = DirectorProducerPermute1[j+1].substring(0,DirectorProducerPermute1[j+1].indexOf("'")-1) + DirectorProducerPermute1[j+1].substring(DirectorProducerPermute1[j+1].indexOf("'")+1,DirectorProducerPermute1[j+1].length()); 
						}
						while(DirectorProducerPermute1[j+1].contains("."))
							if(DirectorProducerPermute1[j+1].contains("."))
							{
								DirectorProducerPermute1[j+1] = DirectorProducerPermute1[j+1].substring(0,DirectorProducerPermute1[j+1].indexOf(".")-1) + DirectorProducerPermute1[j+1].substring(DirectorProducerPermute1[j+1].indexOf(".")+1,DirectorProducerPermute1[j+1].length()); 
							}
				ParameterizedSparqlString qs = new ParameterizedSparqlString( "" +													//SPARQL Query to retrieve Director-Producer combination movies
						"PREFIX dbpedia2: <http://dbpedia.org/property/>" +
						"PREFIX dbpedia: <http://dbpedia.org/resource/>" +
						"SELECT DISTINCT ?film WHERE {" +
						"?film dbpedia2:director dbpedia:" + DirectorProducerPermute1[j] + "." +
						"?film dbpedia2:producer dbpedia:" + DirectorProducerPermute1[j+1] + "." +
						"}"); 
				QueryExecution exec = QueryExecutionFactory.sparqlService( "http://dbpedia.org/sparql", qs.asQuery() );
				ResultSet results = exec.execSelect();
				while(results.hasNext())
				{
					StringTokenizer token_name = new StringTokenizer(results.next().toString(),"/");
					while(token_name.hasMoreTokens())
					{
						String next = token_name.nextToken();
						if(!(next.equals("dbpedia.org"))&&(!(next.equals("resource")))&&(!(next.equals("( ?film = <http:"))))
						{
							StringTokenizer name = new StringTokenizer(next,"(");
							StringTokenizer name1=new StringTokenizer(name.nextToken(),">");
							StringTokenizer name2 = new StringTokenizer(name1.nextToken(),"_");
							String movie_name = null;
							String movie_namer=null;
							while(name2.hasMoreTokens())
							{
								if(movie_namer==null)
								{
									String namer = name2.nextToken();
									if(name2.hasMoreTokens())
										movie_namer= namer + " ";
									else
										movie_namer = namer;
								}
								else
								{
									String namer=name2.nextToken();
									if(name2.hasMoreTokens())
										movie_namer=movie_namer + namer + " ";
									else
										movie_namer = movie_namer + namer;
								}
							}
							if(!(movie_namer.equals(move)))
								movie_name = "(" + DirectorProducerPermute1[j] + "," + DirectorProducerPermute1[j+1] + ")" + " " + "(" + movie_namer + ")"; 
							if(movie_name!=null)
							{
								System.out.println(movie_name);
								output5.write(movie_name);
								output5.newLine();
							}
						}
					}
				}
			}
			j=j+1;
		}
		output5.close();															//Functions of other classes are called below to start 12 different Map-Reduce jobs.
		CastRating.Retrieve(path+"/ActorPermuteMovies.txt",path + "/output6");
		CastRating.Retrieve(path+"/DirectorPermuteMovies.txt",path + "/output7");
		CastRating.Retrieve(path+"/ProducerPermuteMovies.txt",path + "/output8");
		CastRating.Retrieve(path+"/ActorDirectorPermuteMovies.txt",path + "/output9");
		CastRating.Retrieve(path+"/ActorProducerPermuteMovies.txt",path + "/output10");
		CastRating.Retrieve(path+"/DirectorProducerPermuteMovies.txt",path + "/output11");
		RetrieveBudgetRevenue.Retrieve(path+"/ActorPermuteMovies.txt",path + "/output");
		RetrieveBudgetRevenue.Retrieve(path+"/DirectorPermuteMovies.txt",path + "/output1");
		RetrieveBudgetRevenue.Retrieve(path+"/ProducerPermuteMovies.txt",path + "/output2");
		RetrieveBudgetRevenue.Retrieve(path+"/ActorDirectorPermuteMovies.txt",path + "/output3");
		RetrieveBudgetRevenue.Retrieve(path+"/ActorProducerPermuteMovies.txt",path + "/output4");
		RetrieveBudgetRevenue.Retrieve(path+"/DirectorProducerPermuteMovies.txt",path + "/output5");
		ActorRatingBudgFIle.Act(path);
	}
	
}